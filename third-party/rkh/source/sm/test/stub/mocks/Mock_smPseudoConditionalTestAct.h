/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_SMPSEUDOCONDITIONALTESTACT_H
#define _MOCK_SMPSEUDOCONDITIONALTESTACT_H

#include "smPseudoConditionalTestAct.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void Mock_smPseudoConditionalTestAct_Init(void);
void Mock_smPseudoConditionalTestAct_Destroy(void);
void Mock_smPseudoConditionalTestAct_Verify(void);




#define smPCT_tr1_Ignore() smPCT_tr1_CMockIgnore()
void smPCT_tr1_CMockIgnore(void);
#define smPCT_tr1_Expect(me, pe) smPCT_tr1_CMockExpect(__LINE__, me, pe)
void smPCT_tr1_CMockExpect(UNITY_LINE_TYPE cmock_line, SmPseudoConditionalTest* const me, RKH_EVT_T* pe);
typedef void (* CMOCK_smPCT_tr1_CALLBACK)(SmPseudoConditionalTest* const me, RKH_EVT_T* pe, int cmock_num_calls);
void smPCT_tr1_StubWithCallback(CMOCK_smPCT_tr1_CALLBACK Callback);
#define smPCT_tr1_IgnoreArg_me() smPCT_tr1_CMockIgnoreArg_me(__LINE__)
void smPCT_tr1_CMockIgnoreArg_me(UNITY_LINE_TYPE cmock_line);
#define smPCT_tr1_IgnoreArg_pe() smPCT_tr1_CMockIgnoreArg_pe(__LINE__)
void smPCT_tr1_CMockIgnoreArg_pe(UNITY_LINE_TYPE cmock_line);
#define smPCT_tr2_Ignore() smPCT_tr2_CMockIgnore()
void smPCT_tr2_CMockIgnore(void);
#define smPCT_tr2_Expect(me, pe) smPCT_tr2_CMockExpect(__LINE__, me, pe)
void smPCT_tr2_CMockExpect(UNITY_LINE_TYPE cmock_line, SmPseudoConditionalTest* const me, RKH_EVT_T* pe);
typedef void (* CMOCK_smPCT_tr2_CALLBACK)(SmPseudoConditionalTest* const me, RKH_EVT_T* pe, int cmock_num_calls);
void smPCT_tr2_StubWithCallback(CMOCK_smPCT_tr2_CALLBACK Callback);
#define smPCT_tr2_IgnoreArg_me() smPCT_tr2_CMockIgnoreArg_me(__LINE__)
void smPCT_tr2_CMockIgnoreArg_me(UNITY_LINE_TYPE cmock_line);
#define smPCT_tr2_IgnoreArg_pe() smPCT_tr2_CMockIgnoreArg_pe(__LINE__)
void smPCT_tr2_CMockIgnoreArg_pe(UNITY_LINE_TYPE cmock_line);
#define smPCT_tr3_Ignore() smPCT_tr3_CMockIgnore()
void smPCT_tr3_CMockIgnore(void);
#define smPCT_tr3_Expect(me, pe) smPCT_tr3_CMockExpect(__LINE__, me, pe)
void smPCT_tr3_CMockExpect(UNITY_LINE_TYPE cmock_line, SmPseudoConditionalTest* const me, RKH_EVT_T* pe);
typedef void (* CMOCK_smPCT_tr3_CALLBACK)(SmPseudoConditionalTest* const me, RKH_EVT_T* pe, int cmock_num_calls);
void smPCT_tr3_StubWithCallback(CMOCK_smPCT_tr3_CALLBACK Callback);
#define smPCT_tr3_IgnoreArg_me() smPCT_tr3_CMockIgnoreArg_me(__LINE__)
void smPCT_tr3_CMockIgnoreArg_me(UNITY_LINE_TYPE cmock_line);
#define smPCT_tr3_IgnoreArg_pe() smPCT_tr3_CMockIgnoreArg_pe(__LINE__)
void smPCT_tr3_CMockIgnoreArg_pe(UNITY_LINE_TYPE cmock_line);
#define smPCT_tr4_Ignore() smPCT_tr4_CMockIgnore()
void smPCT_tr4_CMockIgnore(void);
#define smPCT_tr4_Expect(me, pe) smPCT_tr4_CMockExpect(__LINE__, me, pe)
void smPCT_tr4_CMockExpect(UNITY_LINE_TYPE cmock_line, SmPseudoConditionalTest* const me, RKH_EVT_T* pe);
typedef void (* CMOCK_smPCT_tr4_CALLBACK)(SmPseudoConditionalTest* const me, RKH_EVT_T* pe, int cmock_num_calls);
void smPCT_tr4_StubWithCallback(CMOCK_smPCT_tr4_CALLBACK Callback);
#define smPCT_tr4_IgnoreArg_me() smPCT_tr4_CMockIgnoreArg_me(__LINE__)
void smPCT_tr4_CMockIgnoreArg_me(UNITY_LINE_TYPE cmock_line);
#define smPCT_tr4_IgnoreArg_pe() smPCT_tr4_CMockIgnoreArg_pe(__LINE__)
void smPCT_tr4_CMockIgnoreArg_pe(UNITY_LINE_TYPE cmock_line);
#define smPCT_setCondition_Ignore() smPCT_setCondition_CMockIgnore()
void smPCT_setCondition_CMockIgnore(void);
#define smPCT_setCondition_Expect(me, pe) smPCT_setCondition_CMockExpect(__LINE__, me, pe)
void smPCT_setCondition_CMockExpect(UNITY_LINE_TYPE cmock_line, SmPseudoConditionalTest* const me, RKH_EVT_T* pe);
typedef void (* CMOCK_smPCT_setCondition_CALLBACK)(SmPseudoConditionalTest* const me, RKH_EVT_T* pe, int cmock_num_calls);
void smPCT_setCondition_StubWithCallback(CMOCK_smPCT_setCondition_CALLBACK Callback);
#define smPCT_setCondition_IgnoreArg_me() smPCT_setCondition_CMockIgnoreArg_me(__LINE__)
void smPCT_setCondition_CMockIgnoreArg_me(UNITY_LINE_TYPE cmock_line);
#define smPCT_setCondition_IgnoreArg_pe() smPCT_setCondition_CMockIgnoreArg_pe(__LINE__)
void smPCT_setCondition_CMockIgnoreArg_pe(UNITY_LINE_TYPE cmock_line);
#define smPCT_onEventA_IgnoreAndReturn(cmock_retval) smPCT_onEventA_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void smPCT_onEventA_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, rbool_t cmock_to_return);
#define smPCT_onEventA_ExpectAndReturn(me, pe, cmock_retval) smPCT_onEventA_CMockExpectAndReturn(__LINE__, me, pe, cmock_retval)
void smPCT_onEventA_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, SmPseudoConditionalTest* const me, RKH_EVT_T* pe, rbool_t cmock_to_return);
typedef rbool_t (* CMOCK_smPCT_onEventA_CALLBACK)(SmPseudoConditionalTest* const me, RKH_EVT_T* pe, int cmock_num_calls);
void smPCT_onEventA_StubWithCallback(CMOCK_smPCT_onEventA_CALLBACK Callback);
#define smPCT_onEventA_IgnoreArg_me() smPCT_onEventA_CMockIgnoreArg_me(__LINE__)
void smPCT_onEventA_CMockIgnoreArg_me(UNITY_LINE_TYPE cmock_line);
#define smPCT_onEventA_IgnoreArg_pe() smPCT_onEventA_CMockIgnoreArg_pe(__LINE__)
void smPCT_onEventA_CMockIgnoreArg_pe(UNITY_LINE_TYPE cmock_line);
#define smPCT_onEventD_IgnoreAndReturn(cmock_retval) smPCT_onEventD_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void smPCT_onEventD_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, rbool_t cmock_to_return);
#define smPCT_onEventD_ExpectAndReturn(me, pe, cmock_retval) smPCT_onEventD_CMockExpectAndReturn(__LINE__, me, pe, cmock_retval)
void smPCT_onEventD_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, SmPseudoConditionalTest* const me, RKH_EVT_T* pe, rbool_t cmock_to_return);
typedef rbool_t (* CMOCK_smPCT_onEventD_CALLBACK)(SmPseudoConditionalTest* const me, RKH_EVT_T* pe, int cmock_num_calls);
void smPCT_onEventD_StubWithCallback(CMOCK_smPCT_onEventD_CALLBACK Callback);
#define smPCT_onEventD_IgnoreArg_me() smPCT_onEventD_CMockIgnoreArg_me(__LINE__)
void smPCT_onEventD_CMockIgnoreArg_me(UNITY_LINE_TYPE cmock_line);
#define smPCT_onEventD_IgnoreArg_pe() smPCT_onEventD_CMockIgnoreArg_pe(__LINE__)
void smPCT_onEventD_CMockIgnoreArg_pe(UNITY_LINE_TYPE cmock_line);
#define smPCT_guardTrue_IgnoreAndReturn(cmock_retval) smPCT_guardTrue_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void smPCT_guardTrue_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, rbool_t cmock_to_return);
#define smPCT_guardTrue_ExpectAndReturn(me, pe, cmock_retval) smPCT_guardTrue_CMockExpectAndReturn(__LINE__, me, pe, cmock_retval)
void smPCT_guardTrue_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, SmPseudoConditionalTest* const me, RKH_EVT_T* pe, rbool_t cmock_to_return);
typedef rbool_t (* CMOCK_smPCT_guardTrue_CALLBACK)(SmPseudoConditionalTest* const me, RKH_EVT_T* pe, int cmock_num_calls);
void smPCT_guardTrue_StubWithCallback(CMOCK_smPCT_guardTrue_CALLBACK Callback);
#define smPCT_guardTrue_IgnoreArg_me() smPCT_guardTrue_CMockIgnoreArg_me(__LINE__)
void smPCT_guardTrue_CMockIgnoreArg_me(UNITY_LINE_TYPE cmock_line);
#define smPCT_guardTrue_IgnoreArg_pe() smPCT_guardTrue_CMockIgnoreArg_pe(__LINE__)
void smPCT_guardTrue_CMockIgnoreArg_pe(UNITY_LINE_TYPE cmock_line);

#endif
